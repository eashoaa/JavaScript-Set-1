/**
 * Savings
 * Calculate the money remaining for an employee after taxes and expenses.
 *
 * @param {Number} grossPay The gross pay of an employee for a certain time period, expressed in centavos
 * @param {Number} taxRate The tax rate for a certain time period, expressed as a number between 0 and 1 (e.g., 0.12)
 * @param {Number} expenses The expenses of an employee for a certain time period, expressed in centavos
 * @returns {Number} The number of centavos remaining from an employee's pay after taxes and expenses
 */
function savings(grossPay, taxRate, expenses) {
    const afterTaxPay = Math.floor(grossPay * (1 - taxRate));
    return afterTaxPay - expenses;
}

/**
 * Material waste
 * Calculate how much material input will be wasted after running a number of jobs that consume a set amount of material.
 *
 * @param {Number} totalMaterial How much material you have at the start
 * @param {string} materialUnits The unit used to express an amount of material, e.g., "kg"
 * @param {Number} numJobs How many jobs to run
 * @param {Number} jobConsumption How much material each job consumes
 * @returns {string} The amount of remaining material expressed with its unit (e.g., "10kg")
 */
function materialWaste(totalMaterial, materialUnits, numJobs, jobConsumption) {
    const totalConsumed = numJobs * jobConsumption;
    const remainingMaterial = totalMaterial - totalConsumed;
    return `${remainingMaterial}${materialUnits}`;
}

/**
 * Interest
 * Calculate the final value of an investment after gaining simple interest over a number of periods.
 *
 * @param {Number} principal The principal, or starting, amount invested, expressed in centavos
 * @param {Number} rate The interest rate per period, expressed as a decimal representation of a percentage (e.g., 3% is 0.03)
 * @param {Number} periods The number of periods invested
 * @returns {Number} The final value of the investment
 */
function interest(principal, rate, periods) {
    const interestAmount = principal * rate * periods;
    const finalAmount = principal + interestAmount;
    return Math.floor(finalAmount);
}
